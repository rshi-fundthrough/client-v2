// This file is for setting up state management with redux

// have a action for when the component first starts up to copy app the things
// one for updating
import axios from 'axios';

// constants, action types
export const DELETE_ITEM = "DELETE_ITEM";
export const ADD_ITEM = "ADD_ITEM";
export const MASS_ADD = "MASS_ADD";
export const UPDATE_ITEM = "UPDATE_ITEM";

// action creators
export const deleteItem = index => dispatch => {
    return dispatch({
        type: DELETE_ITEM, 
        index
    });
}

export const addItem = book => dispatch => {
    return dispatch({
        type: ADD_ITEM,
        book
    });
}

export function massAdd(bookArr){
    return function (dispatch) {
        dispatch({ type: MASS_ADD, bookArr})
    }
}

export const updateItem = (index, book) => dispatch => {
        return dispatch({
            type: UPDATE_ITEM,
            book,
            index
        });
}

export const updateBook = (index, title, author, book) => dispatch => {
    // make api call 
    return new Promise((resolve, reject) => {
        axios.patch('http://localhost:3000/books/' + book.id,
            {
                title,
                author
            })
        .then(response => {
            // update book in state
            updateItem(index, Object.assign({},
                book, {title: title, author: author}    
            ))(dispatch);
            resolve(response);
        })
        .catch(err => {
            reject(err);
        });
    // make storage updates
    });
}

export const deleteBook = (id, index) => dispatch => {
    // make api call 
    axios.delete('http://localhost:3000/books/' + id)
    .then(response => {
        // remove book from state in order to prevent double deleting
        deleteItem(index)(dispatch);
        console.log('Book', id, 'was successfully delete.', response);
    })
    .catch(err => console.error(err));   
}


export const getBooks = () => dispatch => {
    axios.get('http://localhost:3000/books')
    .then(response => {
        if(response.data.length === 0){
            // if there are no items in db make call to NYT
            console.log('No elements in api calling NYT api');
            getNYTBooks();
        } else {
            // there are items just slap them in the client
            console.log(response.data);
            massAdd(response.data)(dispatch);
            // this.setState({ bookInfo: response.data });
        }
    })
    .catch(err=>{
        console.error(err);
    });
}

const getNYTBooks = () => {
    // call the NYT api
    axios.get('https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=SOCAlRIHdoYLR2gGIUGknceo5m8rACnt')
    .then(response=>{
      console.log('Received NYT books');
      // console.log(response.data.results.books);
      setThisBooks(response.data.results.books);
    })
    .catch(err => console.error(err));
}

const setThisBooks = (bookList) => dispatch => {
    // takes in array and populates this.state.booksInfo with info -- WILL OVERWRITE ALL THE BOOKS
    // don't use the tempList thing I don't think it's actually being appended to
    let temp = []
    bookList.forEach( bk => {
        temp.push({
            title: bk.title,
            author: bk.author,
            isbn10: bk.primary_isbn10,
            description: bk.description,
            imgUrl: bk.book_image
        });    
        // this.props.onGetBook(response.data); // use the response not bk
    });
    
    axios.post('http://localhost:3000/books', {
        // id is generated by the DB don't explicitly set
        books: temp    
    }).then(resp => {
        console.log(resp);
        massAdd(resp.data)(dispatch);
    }).catch();
    
}